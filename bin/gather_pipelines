#!/usr/bin/env bash
#
# Run this script to collect openshift-pipelines related debug information

set -eu -o pipefail

LOGS_DIR=${LOGS_DIR:-must-gather-logs}

mkdir -p ${LOGS_DIR}
echo "gather_pipelines:$LINENO] inspecting apiservices, crd, clusterversion .."
oc adm inspect $(oc get apiservices -o name | grep tekton) $(oc get crd -o name | grep tekton) clusterversion/version --dest-dir=${LOGS_DIR}

# Describe and Get all namespaced api resources of component across cluster

APIRESOURCES=$(oc get crd -o json | jq -r '.items[] | select((.spec.group | contains ("tekton.dev")) and .spec.scope=="Namespaced") | .spec.group + " " + .metadata.name + " " + .spec.names.plural')
while read API_GROUP APIRESOURCE API_PLURAL_NAME; do
    echo "gather_pipelines:$LINENO] collecting ${APIRESOURCE} .."
    NAMESPACES=$(oc get ${APIRESOURCE} --all-namespaces=true --ignore-not-found -o jsonpath='{range .items[*]}{@.metadata.namespace}{"\n"}{end}' | uniq)
    for NAMESPACE in ${NAMESPACES[@]}; do
        mkdir -p ${LOGS_DIR}/namespaces/${NAMESPACE}/${API_GROUP}/describe
        oc describe ${APIRESOURCE} -n ${NAMESPACE} >${LOGS_DIR}/namespaces/${NAMESPACE}/${API_GROUP}/describe/${API_PLURAL_NAME}
        oc get ${APIRESOURCE} -n ${NAMESPACE} -o=yaml >${LOGS_DIR}/namespaces/${NAMESPACE}/${API_GROUP}/${API_PLURAL_NAME}.yaml
    done
done <<< $APIRESOURCES

# Gather the YAML of Cluster-Scoped CRs related to tekton

APIRESOURCES=$(oc get crd -o json | jq -r '.items[] | select((.spec.group | contains ("tekton.dev")) and .spec.scope=="Cluster") | .spec.group + " " + .metadata.name + " " + .spec.names.plural')

while read API_GROUP APIRESOURCE API_PLURAL_NAME; do
    mkdir -p ${LOGS_DIR}/cluster-scoped-resources/${API_GROUP}/${API_PLURAL_NAME}/describe
    echo "gather_pipelines:$LINENO] collecting ${APIRESOURCE} .."
    oc describe ${APIRESOURCE} >${LOGS_DIR}/cluster-scoped-resources/${API_GROUP}/${API_PLURAL_NAME}/describe/${API_PLURAL_NAME} || true
    oc get ${APIRESOURCE} -o=yaml >${LOGS_DIR}/cluster-scoped-resources/${API_GROUP}/${API_PLURAL_NAME}.yaml || true
done <<< $APIRESOURCES

# Collect resources from openshift-operators, openshift-pipelines and tekton-pipelines namespaces
echo "gather_pipelines:$LINENO] inspecting ns/openshift-operators ns/openshift-pipelines clusterroles clusterrolebindings .."
oc adm inspect ns/openshift-operators ns/openshift-pipelines $(oc get clusterroles,clusterrolebindings -o name | egrep -i "tekton|pipelines")  --dest-dir=${LOGS_DIR} > /dev/null
echo "gather_pipelines:$LINENO] inspecting clusterserviceversions subscriptions installplans .."
oc adm inspect -n openshift-operators $(oc get csv,sub,ip -o name) --dest-dir=${LOGS_DIR} > /dev/null
echo "gather_pipelines:$LINENO] inspecting roles rolebindings in openshift-pipelines .."
oc adm inspect -n openshift-pipelines $(oc get roles,rolebindings -o name) --dest-dir=${LOGS_DIR} > /dev/null
echo "gather_pipelines:$LINENO] inspecting ns/tekton-pipelines .."
(oc adm inspect ns/tekton-pipelines --dest-dir=${LOGS_DIR} &>/dev/null) || echo "gather_pipelines:$LINENO] inspecting ns/tekton-pipelines .. failed"
echo "gather_pipelines:$LINENO] inspecting roles rolebindings in tekton-pipelines .."
(oc adm inspect -n tekton-pipelines $(oc get roles,rolebindings -o name) --dest-dir=${LOGS_DIR} &>/dev/null) || echo "gather_pipelines:$LINENO] inspecting roles rolebindings in tekton-pipelines .. failed"

# Collect logs and yaml specs for pods referenced by TaskRuns
NAMESPACES=$(oc get taskruns,eventlisteners --all-namespaces=true --ignore-not-found -o jsonpath='{range .items[*]}{@.metadata.namespace}{"\n"}{end}' | uniq)
for NAMESPACE in ${NAMESPACES[@]}; do
    # get all the pods names referenced by taskruns
    PODS=$(oc get po -n ${NAMESPACE} -o json | jq -r '.items[].metadata | select (.labels."app.kubernetes.io/managed-by"=="tekton-pipelines" or .labels."app.kubernetes.io/managed-by"=="EventListener")| .name' | tr  '\n' ' ')
    mkdir -p ${LOGS_DIR}/namespaces/${NAMESPACE}/core

    echo "gather_pipelines:$LINENO] collecting eventlisteners and taskrun pods in ${NAMESPACE} .."
    eval oc get pod ${PODS} -n ${NAMESPACE} -o=yaml >${LOGS_DIR}/namespaces/${NAMESPACE}/core/pods.yaml
    output=$(oc get svc,ep,routes -n ${NAMESPACE} --ignore-not-found)
    # Check if the output is empty (no objects found)
    if [ -z "$output" ]; then
        echo "The requested objects(svc,ep,routes) do not exist in ${NAMESPACE}"
    else
        echo "gather_pipelines:$LINENO] inspecting endpoints, services and route in ${NAMESPACE} .."
        oc adm inspect -n ${NAMESPACE} $(oc get svc,ep,routes -o name -n ${NAMESPACE}) --dest-dir=${LOGS_DIR} > /dev/null
    fi
    for POD in ${PODS[@]}; do
        echo "gather_pipelines:$LINENO] collecting logs from pod ${POD} in ${NAMESPACE} .."
        mkdir -p ${LOGS_DIR}/namespaces/${NAMESPACE}/pods/${POD}
        CONTAINERS=$(oc get po -n ${NAMESPACE} ${POD} -o jsonpath='{range .spec.containers[*]}{@.name}{" "}{end}')
        for CONTAINER in ${CONTAINERS[@]}; do
            mkdir -p ${LOGS_DIR}/namespaces/${NAMESPACE}/pods/${POD}/${CONTAINER}/${CONTAINER}/logs
            oc logs -n ${NAMESPACE} ${POD} -c ${CONTAINER} &> ${LOGS_DIR}/namespaces/${NAMESPACE}/pods/${POD}/${CONTAINER}/${CONTAINER}/logs/current.log
        done
        oc get pods -n ${NAMESPACE} ${POD} -oyaml > ${LOGS_DIR}/namespaces/${NAMESPACE}/pods/${POD}/${POD}.yaml
    done
done

# Collect indipendent logs for eventlistener, taskruns and pipelineruns
APIRESOURCES=(eventlistener taskrun pipelinerun)
for APIRESOURCE in ${APIRESOURCES[@]}; do
    NAMESPACES=$(oc get ${APIRESOURCE} --all-namespaces=true --ignore-not-found -o jsonpath='{range .items[*]}{@.metadata.namespace}{"\n"}{end}' | uniq)
    for NAMESPACE in ${NAMESPACES[@]}; do
        RESOURCES=$(oc get ${APIRESOURCE} --namespace=${NAMESPACE} --ignore-not-found -o jsonpath='{range .items[*]}{@.metadata.name}{"\n"}{end}')
        for RESOURCE in ${RESOURCES[@]}; do
            echo "gather_pipelines:$LINENO] collecting ${APIRESOURCE} logs in ${NAMESPACE} .."
            mkdir -p ${LOGS_DIR}/namespaces/${NAMESPACE}/${APIRESOURCE}/${RESOURCE}
            tkn ${APIRESOURCE} logs ${RESOURCE} -n ${NAMESPACE} >${LOGS_DIR}/namespaces/${NAMESPACE}/${APIRESOURCE}/${RESOURCE}/${RESOURCE}.log
            oc get ${APIRESOURCE} ${RESOURCE} -n ${NAMESPACE} -oyaml > ${LOGS_DIR}/namespaces/${NAMESPACE}/${APIRESOURCE}/${RESOURCE}/${RESOURCE}.yaml
        done
    done
done

mkdir -p ${LOGS_DIR}/metrics
echo "gather_pipelines:$LINENO] collecting tekton-pipelines-controller metrics.."
curl $(oc get -n openshift-pipelines svc/tekton-pipelines-controller -o jsonpath='{.spec.clusterIP}'):9090/metrics > ${LOGS_DIR}/metrics/tekton-pipelines-controller-metrics.log

echo "gather_pipelines:$LINENO] collecting tekton-pipelines-controller metrics.."
curl $(oc get -n openshift-pipelines svc/tekton-pipelines-webhook -o jsonpath='{.spec.clusterIP}'):9090/metrics > ${LOGS_DIR}/metrics/tekton-pipelines-webhook-metrics.log

echo "gather_pipelines:$LINENO] collecting tekton-triggers-controller metrics.."
curl $(oc get -n openshift-pipelines svc/tekton-triggers-controller -o jsonpath='{.spec.clusterIP}'):9000/metrics > ${LOGS_DIR}/metrics/tekton-triggers-controller-metrics.log

echo "gather_pipelines:$LINENO] collecting pipelines-as-code-watcher metrics.."
curl $(oc get -n openshift-pipelines svc/pipelines-as-code-watcher -o jsonpath='{.spec.clusterIP}'):9090/metrics > ${LOGS_DIR}/metrics/pipelines-as-code-watcher-metrics.log
